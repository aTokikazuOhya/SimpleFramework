name: Xcode - Build and Upload

#on: push
#on: workflow_dispatch #  [push, pull_request]

env:
  PRODUCT_NAME: SimpleFramework
  PROJECT_FILE: SimpleFramework.xcodeproj
  BUILD_SCHEME: Universal-Framework
  TEST_SCHEME: SimpleFramework
  SERVER_SETTING_FILE: SimpleFramework/Simple.swift
  STAGING_SERVER_URL: https://api.tangerine.io:8443/TangerineCloudV2

jobs:
  build:
    name: Build the framework
    runs-on: macos-latest

    steps:
      - name: Prepare
        run: |
          SHORT_SHA=$(echo ${{ github.sha }} | cut -c 1-8)
          DIR_NAME="${PRODUCT_NAME}@$SHORT_SHA"
          echo "DIR_NAME=$DIR_NAME" >> "$GITHUB_ENV"
          mkdir -p $DIR_NAME

      - name: Checkout
        uses: actions/checkout@v4

      - name: Install the Apple certificate and provisioning profile
        env:
          BUILD_CERTIFICATE_BASE64: ${{ secrets.BUILD_CERTIFICATE_BASE64 }}
          P12_PASSWORD: ${{ secrets.P12_PASSWORD }}
          BUILD_PROVISION_PROFILE_BASE64: ${{ secrets.BUILD_PROVISION_PROFILE_BASE64 }}
          KEYCHAIN_PASSWORD: ${{ secrets.KEYCHAIN_PASSWORD }}
        run: |
          # create variables
          CERTIFICATE_PATH=$RUNNER_TEMP/build_certificate.p12
          PP_PATH=$RUNNER_TEMP/build_pp.mobileprovision
          KEYCHAIN_PATH=$RUNNER_TEMP/app-signing.keychain-db

          # import certificate and provisioning profile from secrets
          echo -n "$BUILD_CERTIFICATE_BASE64" | base64 --decode -o $CERTIFICATE_PATH
          echo -n "$BUILD_PROVISION_PROFILE_BASE64" | base64 --decode -o $PP_PATH

          # create temporary keychain
          security create-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security set-keychain-settings -lut 21600 $KEYCHAIN_PATH
          security unlock-keychain -p "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH

          # import certificate to keychain
          security import $CERTIFICATE_PATH -P "$P12_PASSWORD" -A -t cert -f pkcs12 -k $KEYCHAIN_PATH
          security set-key-partition-list -S apple-tool:,apple: -k "$KEYCHAIN_PASSWORD" $KEYCHAIN_PATH
          security list-keychain -d user -s $KEYCHAIN_PATH

          # apply provisioning profile
          mkdir -p ~/Library/MobileDevice/Provisioning\ Profiles
          cp $PP_PATH ~/Library/MobileDevice/Provisioning\ Profiles

      - name: Build [production] (AS-IS)
        run: |
          xcodebuild clean build analyze -project $PROJECT_FILE -scheme $BUILD_SCHEME | xcpretty && exit ${PIPESTATUS[0]}

      - name: Test [production]
        env:
          PLATFORM: 'iOS Simulator'
          MODEL: "iPhone SE"
          OS: 'latest'
        run: |
          device=$(xcrun xctrace list devices 2>&1 | grep -oE "$MODEL.*Simulator" | tail -n 1 | sed 's/ Simulator//')
          echo "device: $device"
          xcodebuild test -project $PROJECT_FILE -scheme $TEST_SCHEME -sdk iphonesimulator -destination "platform=$PLATFORM,name=$device,OS=$OS" | xcpretty && exit ${PIPESTATUS[0]}

      - name: Package [production]
        env:
          ENV_NAME: production
        run: |
          mkdir -p $DIR_NAME/$ENV_NAME
          mv *.xcframework $DIR_NAME/$ENV_NAME
          grep -E "^let +SERVER_BASE_URL" $SERVER_SETTING_FILE > $DIR_NAME/$ENV_NAME/info_$ENV_NAME.txt

      - name: Edit for staging
        run: |
          sed -i.bak -E "/^let +SERVER_BASE_URL/s#\".*\"#\"$STAGING_SERVER_URL\"#" $SERVER_SETTING_FILE

      - name: Build [staging]
        run: |
          xcodebuild clean build analyze -project $PROJECT_FILE -scheme $BUILD_SCHEME | xcpretty && exit ${PIPESTATUS[0]}

      - name: Package [staging]
        env:
          ENV_NAME: staging
        run: |
          mkdir -p $DIR_NAME/$ENV_NAME
          mv *.xcframework $DIR_NAME/$ENV_NAME
          grep -E "^let +SERVER_BASE_URL" $SERVER_SETTING_FILE > $DIR_NAME/$ENV_NAME/info_$ENV_NAME.txt

      - name: Create info file
        run: |
          {
            date
            echo "Repository: ${{ github.repositoryUrl }}"
            echo "Ref: ${{ github.ref }}"
            echo "SHA: ${{ github.sha }}"
          } > $DIR_NAME/info.txt

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          name: ${{ env.DIR_NAME }}
          path: ${{ env.DIR_NAME }}
